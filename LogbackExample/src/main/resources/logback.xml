
<!-- In this file, we will have all of the configuration for your
loggers. All configuration should go inside the config tags
 -->
<configuration>

	<!-- You can create several appenders, appenders specify where
	your logs will go and where we will format the logging messages
	
	Some other logback appenders are:
		ConsoleAppender: appends log to the console
		OutputStreamAppender: appends log events to java.io.OutputStream
		FileAppender
		RollingFileAppender: appends log events to a file with the option of 
							automatic file rollover
	 -->
	<appender name="FILE" class="ch.qos.logback.core.FileAppender">
		<!-- Here specifies the file we want to send our logs to -->
		<file>src/main/resources/logback.log</file>
	
		<!-- here is the formatting for the message -->
		<encoder>
			<pattern>%d{HH:mm:ss:SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
	
	</appender>
	
	<!-- Here we can specifically identify a logger level and where we want it to be
	logged.
	-->
	<logger name="loggingEx.LoggingBasics" level="trace">
		
		<appender-ref ref="File"/>
	
	</logger>
	
	<!-- There can only be one root tag in your xml file and you can only have
	at most one root element
	
	One thing that occurs about the levels: We can set the level for our logging
	that occurs below a certain level is not written to our file
	Logging levels: Error > Warn > Info > Debug > Trace
		Trace: Most detailed logging level, and the lowest level - mostly used for
		deep debugging.
		Debug: for debugging an app, less detailed than trace but still low lvl
		Info: provides informational messages, for example when an operation or
		process has started or ended.
		Warn: gives a warning that the application might have harmful events (events
		that might require attention but not critical.
		Error: logs error events, whether expected or unexpected - meaning part of the
		application is not working properly.
	 -->
	<root level="info">
	
	</root>
	
</configuration>